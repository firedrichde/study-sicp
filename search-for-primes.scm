(load "prime.scm")
(load "primeTest.scm")

(define (next-odd x)
    (if (even? x)
        (+ x 1)
        (+ x 2)))

(define (continue-primes x n)
    (cond ((= 0 n) (display " are primes"))
        ((prime? x) 
        ;   (display x)
        ;  (newline)
         (continue-primes (next-odd x) (- n 1)))
         (else (continue-primes (next-odd x) n))
    )
)

(define (fast-continue-primes x n)
    (define times 3)
    (cond ((= 0 n) (display " are primes"))
        ((fast-prime? x times) 
        ;   (display x)
        ;  (newline)
         (fast-continue-primes (next-odd x) (- n 1)))
         (else (fast-continue-primes (next-odd x) n))
    )
)

(define (search-for-primes x fast)
    (let ((start-time (real-time-clock)))
        (if (= fast 0)
            (continue-primes x 3)
            (fast-continue-primes x 3))
        (- (real-time-clock) start-time)))